// Generated by CoffeeScript 1.6.3
(function() {
  var GameOverScene, GameScene, Panel, TitleScene, core,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  core = {};

  Array.prototype.shuffle = function() {
    var i, j, t;
    i = this.length;
    while (i) {
      j = Math.floor(Math.random() * i);
      t = this[--i];
      this[i] = this[j];
      this[j] = t;
    }
    return this;
  };

  Panel = (function(_super) {
    __extends(Panel, _super);

    function Panel(num) {
      Panel.__super__.constructor.call(this, 575, 75);
    }

    return Panel;

  })(Sprite);

  TitleScene = (function(_super) {
    __extends(TitleScene, _super);

    function TitleScene() {
      TitleScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["title.png"];
      this.addChild(this.bg);
    }

    TitleScene.prototype.ontouchstart = function() {
      core.gameScene = new GameScene();
      return core.replaceScene(core.gameScene);
    };

    return TitleScene;

  })(Scene);

  GameScene = (function(_super) {
    __extends(GameScene, _super);

    function GameScene() {
      var ans, num;
      GameScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game.png"];
      this.addChild(this.bg);
      this.number = (function() {
        var _i, _results;
        _results = [];
        for (num = _i = 1; _i <= 10; num = ++_i) {
          _results.push(Math.floor(Math.random() * 9 + 1));
        }
        return _results;
      })();
      ans = function(s) {
        return s.reduce(function(t, s) {
          return t * s;
        });
      };
      this.ans = ans(this.number);
      this.label = new Label(this.number[0]);
      this.label.font = "128px Serif";
      this.label.color = "rgb(244, 244, 244)";
      this.label.width = 800;
      this.label.textAlign = "center";
      this.label.moveTo((HQ_GAME_WIDTH - this.label.width) / 2, 300);
      this.addChild(this.label);
      this.n = 1;
    }

    GameScene.prototype.onenterframe = function() {
      if (this.age % 20 === 0 && this.n < 10) {
        this.label.text = this.number[this.n];
        return this.n++;
      } else if (this.age % 20 === 0) {
        core.gameOverScene = new GameOverScene(this.ans);
        return core.replaceScene(core.gameOverScene);
      }
    };

    return GameScene;

  })(Scene);

  GameOverScene = (function(_super) {
    var Pos;

    __extends(GameOverScene, _super);

    function GameOverScene(ans) {
      var i, label, num, panel, pos, _i, _j,
        _this = this;
      GameOverScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game_over.png"];
      this.addChild(this.bg);
      this.ans = ans;
      this.number = [];
      this.number.push(this.ans);
      for (num = _i = 0; _i <= 2; num = ++_i) {
        this.number.push(this.ans + Math.floor(Math.random() * 9999 - 4000));
      }
      this.number.shuffle;
      console.log(this.number);
      this.label = [];
      for (i = _j = 0; _j <= 3; i = ++_j) {
        pos = Pos[i];
        label = new Label(this.number[i]);
        label.font = "64px Serif";
        label.color = "rgb(24, 24, 24)";
        label.width = 575;
        label.textAlign = "center";
        label.moveTo(pos.x, pos.y);
        this.addChild(label);
        this.label.push(label);
        panel = new Panel(this.number[i]);
        panel.moveTo(pos.x, pos.y);
        this.addChild(panel);
        panel.addEventListener("touchstart", function() {
          if (_this.number[i] === _this.ans) {
            _this.scoreLabel = new Label("正解");
            _this.scoreLabel.width = 900;
            _this.scoreLabel.textAlign = "center";
            _this.scoreLabel.moveTo((HQ_GAME_WIDTH - _this.scoreLabel.width) / 2, 300);
            _this.scoreLabel.font = "128px Sans-serif";
            _this.scoreLabel.color = "red";
            _this.addChild(_this.scoreLabel);
            return _this.tl.delay(90).then(function() {
              return core.replaceScene(core.titleScene);
            });
          } else {
            _this.scoreLabel = new Label("残念");
            _this.scoreLabel.width = 900;
            _this.scoreLabel.textAlign = "center";
            _this.scoreLabel.moveTo((HQ_GAME_WIDTH - _this.scoreLabel.width) / 2, 300);
            _this.scoreLabel.font = "128px Sans-serif";
            _this.scoreLabel.color = "blue";
            _this.addChild(_this.scoreLabel);
            return _this.tl.delay(90).then(function() {
              return core.replaceScene(core.titleScene);
            });
          }
        });
      }
    }

    Pos = [
      {
        x: 33,
        y: 246
      }, {
        x: 675,
        y: 246
      }, {
        x: 33,
        y: 388
      }, {
        x: 675,
        y: 388
      }
    ];

    return GameOverScene;

  })(Scene);

  window.onload = function() {
    var assets;
    core = new Core(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
    assets = [];
    assets.push("title.png");
    assets.push("game.png");
    assets.push("game_over.png");
    assets.push("panel.png");
    core.preload(assets);
    core.onload = function() {
      this.titleScene = new TitleScene();
      return this.pushScene(this.titleScene);
    };
    return core.start();
  };

}).call(this);
