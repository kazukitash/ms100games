// Generated by CoffeeScript 1.6.3
(function() {
  var Capsule, Circle, CircleSurface, GameScene, Handle, HowToScene, Options, RestartBtn, Square, SquareSurface, TitleScene, Triangle, TriangleSurface, core,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  core = {};

  Options = [
    {
      style: "#ffff5a"
    }, {
      style: "#ffafff"
    }, {
      style: "#4bc8ff"
    }, {
      style: "#a4ff5e"
    }, {
      style: "#ff0000"
    }, {
      style: "#ffaa3c"
    }, {
      style: "#007575"
    }
  ];

  Capsule = (function(_super) {
    __extends(Capsule, _super);

    function Capsule() {
      Capsule.__super__.constructor.call(this, 160, 169);
      this.image = core.assets["capsule.png"];
      this.moveTo(825 - this.width / 2, 580 - this.height / 2);
    }

    return Capsule;

  })(Sprite);

  RestartBtn = (function(_super) {
    __extends(RestartBtn, _super);

    function RestartBtn() {
      RestartBtn.__super__.constructor.call(this, 236, 83);
      this.image = core.assets["restart.png"];
      this.moveTo(305 - this.width / 2, 670 - this.height / 2);
    }

    RestartBtn.prototype.ontouchstart = function() {
      core.titleScene = new TitleScene();
      return core.replaceScene(core.titleScene);
    };

    return RestartBtn;

  })(Sprite);

  Handle = (function(_super) {
    __extends(Handle, _super);

    function Handle() {
      var _this = this;
      Handle.__super__.constructor.call(this, 206, 212);
      this.image = core.assets["handle.png"];
      this.moveTo(1010, 475);
      this.isUpperLeft = false;
      this.isUpperRight = false;
      this.isLowerLeft = false;
      this.isLowerRight = false;
      this.counter = 1;
      this.isSet = true;
      this.addEventListener("UpperLeft", function() {
        return _this.isUpperLeft = true;
      });
      this.addEventListener("UpperRight", function() {
        return _this.isUpperRight = true;
      });
      this.addEventListener("LowerLeft", function() {
        return _this.isLowerLeft = true;
      });
      this.addEventListener("LowerRight", function() {
        return _this.isLowerRight = true;
      });
      this.addEventListener("Set", function() {
        return _this.isSet = true;
      });
    }

    Handle.prototype.onenterframe = function() {
      var ev;
      if (this.isSet) {
        if (this.isUpperLeft && this.isUpperRight) {
          this.tl.rotateBy(-45, 5);
          this.counter++;
          this.isUpperRight = false;
          this.isLowerRight = false;
        } else if (this.isLowerLeft && this.isUpperLeft) {
          this.tl.rotateBy(-45, 5);
          this.counter++;
          this.isUpperLeft = false;
          this.isUpperRight = false;
        } else if (this.isLowerRight && this.isLowerLeft) {
          this.tl.rotateBy(-45, 5);
          this.counter++;
          this.isLowerLeft = false;
          this.isUpperLeft = false;
        } else if (this.isUpperRight && this.isLowerRight) {
          this.tl.rotateBy(-45, 5);
          this.counter++;
          this.isLowerRight = false;
          this.isLowerLeft = false;
        }
        if (this.counter % 8 === 0) {
          this.counter++;
          this.isSet = false;
          ev = new Event("Gatya");
          return this.dispatchEvent(ev);
        }
      }
    };

    return Handle;

  })(Sprite);

  TriangleSurface = (function(_super) {
    __extends(TriangleSurface, _super);

    function TriangleSurface(options) {
      var radius, side, style;
      side = options.side;
      radius = options.radius;
      style = options.style;
      TriangleSurface.__super__.constructor.call(this, radius, radius);
      this.context.beginPath();
      this.context.moveTo(side / 2, 0);
      this.context.lineTo(side, radius);
      this.context.lineTo(0, radius);
      this.context.closePath();
      this.context.fillStyle = style;
      this.context.fill();
    }

    return TriangleSurface;

  })(Surface);

  SquareSurface = (function(_super) {
    __extends(SquareSurface, _super);

    function SquareSurface(options) {
      var side, style;
      side = options.side;
      style = options.style;
      SquareSurface.__super__.constructor.call(this, side, side);
      this.context.fillStyle = style;
      this.context.fillRect(0, 0, side, side);
    }

    return SquareSurface;

  })(Surface);

  CircleSurface = (function(_super) {
    __extends(CircleSurface, _super);

    function CircleSurface(options) {
      var radius, style;
      radius = options.radius;
      style = options.style;
      CircleSurface.__super__.constructor.call(this, radius * 2, radius * 2);
      this.context.arc(radius, radius, radius, 0, 2 * Math.PI, false);
      this.context.fillStyle = style;
      this.context.fill();
    }

    return CircleSurface;

  })(Surface);

  Triangle = (function(_super) {
    __extends(Triangle, _super);

    function Triangle() {
      var options;
      options = Options[Math.floor(Math.random() * 7)];
      options.side = Math.floor(Math.random() * 50 + 30);
      options.radius = Math.floor(3 * options.side * Math.tan(Math.PI / 6));
      Triangle.__super__.constructor.call(this, options.radius, options.radius);
      this.image = new TriangleSurface(options);
      this.moveTo(310 - this.width / 4, 500 - this.height / 2);
      this.distance = 3 * options.side * Math.tan(Math.PI / 6) / 4;
    }

    Triangle.prototype.onenterframe = function() {
      if (this.age % 60) {
        return this.animation();
      }
    };

    Triangle.prototype.animation = function() {
      var option, speed;
      option = Math.random() * 2 - 1;
      if (option > 0) {
        speed = 1;
      } else {
        speed = -1;
      }
      this.tl.moveBy(speed, 0, 30, enchant.Easing.CUBIC_EASEIN).and().moveBy(0, -3, 30);
      this.tl.moveBy(speed, 0, 30, enchant.Easing.CUBIC_EASEOUT).and().moveBy(0, 3, 30);
      this.tl.moveBy(-speed, 0, 30, enchant.Easing.CUBIC_EASEIN).and().moveBy(0, -3, 30);
      return this.tl.moveBy(-speed, 0, 30, enchant.Easing.CUBIC_EASEOUT).and().moveBy(0, 3, 30);
    };

    return Triangle;

  })(Sprite);

  Square = (function(_super) {
    __extends(Square, _super);

    function Square() {
      var options;
      options = Options[Math.floor(Math.random() * 7)];
      options.side = Math.floor(Math.random() * 40 + 40);
      Square.__super__.constructor.call(this, options.side, options.side);
      this.image = new SquareSurface(options);
      this.moveTo(310 - this.width / 2, 500 - this.height / 2);
      this.distance = options.side / 2;
    }

    Square.prototype.onenterframe = function() {
      if (this.age % 60) {
        return this.animation();
      }
    };

    Square.prototype.animation = function() {
      var option, speed;
      option = Math.random() * 2 - 1;
      if (option > 0) {
        speed = 1;
      } else {
        speed = -1;
      }
      this.tl.moveBy(speed, 0, 30, enchant.Easing.CUBIC_EASEIN).and().moveBy(0, -3, 30);
      this.tl.moveBy(speed, 0, 30, enchant.Easing.CUBIC_EASEOUT).and().moveBy(0, 3, 30);
      this.tl.moveBy(-speed, 0, 30, enchant.Easing.CUBIC_EASEIN).and().moveBy(0, -3, 30);
      return this.tl.moveBy(-speed, 0, 30, enchant.Easing.CUBIC_EASEOUT).and().moveBy(0, 3, 30);
    };

    return Square;

  })(Sprite);

  Circle = (function(_super) {
    __extends(Circle, _super);

    function Circle() {
      var options;
      options = Options[Math.floor(Math.random() * 7)];
      options.radius = Math.floor(Math.random() * 40 + 30);
      Circle.__super__.constructor.call(this, options.radius * 2, options.radius * 2);
      this.image = new CircleSurface(options);
      this.moveTo(310 - this.width / 2, 500 - this.height / 2);
      this.distance = options.radius;
    }

    Circle.prototype.onenterframe = function() {
      if (this.age % 60) {
        return this.animation();
      }
    };

    Circle.prototype.animation = function() {
      var option, speed;
      option = Math.random() * 2 - 1;
      if (option > 0) {
        speed = 1;
      } else {
        speed = -1;
      }
      this.tl.moveBy(speed, 0, 30, enchant.Easing.CUBIC_EASEIN).and().moveBy(0, -3, 30);
      this.tl.moveBy(speed, 0, 30, enchant.Easing.CUBIC_EASEOUT).and().moveBy(0, 3, 30);
      this.tl.moveBy(-speed, 0, 30, enchant.Easing.CUBIC_EASEIN).and().moveBy(0, -3, 30);
      return this.tl.moveBy(-speed, 0, 30, enchant.Easing.CUBIC_EASEOUT).and().moveBy(0, 3, 30);
    };

    return Circle;

  })(Sprite);

  TitleScene = (function(_super) {
    __extends(TitleScene, _super);

    function TitleScene() {
      TitleScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["title.png"];
      this.addChild(this.bg);
    }

    TitleScene.prototype.ontouchstart = function() {
      core.howToScene = new HowToScene();
      return core.pushScene(core.howToScene);
    };

    return TitleScene;

  })(Scene);

  HowToScene = (function(_super) {
    __extends(HowToScene, _super);

    function HowToScene() {
      HowToScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["how.png"];
      this.addChild(this.bg);
    }

    HowToScene.prototype.ontouchstart = function() {
      core.popScene();
      core.gameScene = new GameScene();
      return core.replaceScene(core.gameScene);
    };

    return HowToScene;

  })(Scene);

  GameScene = (function(_super) {
    __extends(GameScene, _super);

    function GameScene() {
      var figure,
        _this = this;
      GameScene.__super__.constructor.apply(this, arguments);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game.png"];
      this.addChild(this.bg);
      this.restartBtn = new RestartBtn();
      this.addChild(this.restartBtn);
      this.handle = new Handle();
      this.addChild(this.handle);
      this.handle.addEventListener("Gatya", function() {
        var capsule, currentFigure, ev, figure, len, maxRadius, radian, x, y;
        capsule = new Capsule();
        _this.addChild(capsule);
        capsule.scale(0.1, 0.1);
        capsule.tl.scaleTo(0.8, 0.8, 30).and().moveTo(470, 200, 30).and().rotateBy(-360, 30);
        capsule.tl.delay(15).scaleTo(1, 1, 15).and().fadeOut(15);
        len = _this.figureList.length;
        currentFigure = _this.figureList[--len];
        maxRadius = currentFigure.distance;
        radian = Math.random() * 360;
        y = -maxRadius * Math.random() * Math.sin(radian) - maxRadius * 0.5;
        if (radian < 90 || radian > 270) {
          x = maxRadius * Math.random() * Math.cos(radian);
        } else {
          x = -maxRadius * Math.random() * Math.cos(radian);
        }
        switch (Math.floor(Math.random() * 3)) {
          case 0:
            figure = new Triangle();
            _this.figureList.push(figure);
            _this.addChild(figure);
            figure.moveTo(currentFigure.x + x, currentFigure.y + y);
            break;
          case 1:
            figure = new Square();
            _this.figureList.push(figure);
            _this.addChild(figure);
            figure.moveTo(currentFigure.x + x, currentFigure.y + y);
            break;
          case 2:
            figure = new Circle();
            _this.figureList.push(figure);
            _this.addChild(figure);
            figure.moveTo(currentFigure.x + x, currentFigure.y + y);
        }
        ev = new Event("Set");
        return _this.handle.tl.delay(30).then(function() {
          return _this.handle.dispatchEvent(ev);
        });
      });
      this.pointer = {
        x: 0,
        y: 0
      };
      this.figureList = [];
      switch (Math.floor(Math.random() * 3)) {
        case 0:
          figure = new Triangle();
          this.figureList.push(figure);
          this.addChild(figure);
          break;
        case 1:
          figure = new Square();
          this.figureList.push(figure);
          this.addChild(figure);
          break;
        case 2:
          figure = new Circle();
          this.figureList.push(figure);
          this.addChild(figure);
      }
    }

    GameScene.prototype.ontouchstart = function(e) {
      this.pointer.x = e.x;
      return this.pointer.y = e.y;
    };

    GameScene.prototype.ontouchmove = function(e) {
      var ev;
      if (e.x - this.pointer.x < 0 && e.y - this.pointer.y < 0) {
        ev = new Event("UpperLeft");
        this.handle.dispatchEvent(ev);
      } else if (e.x - this.pointer.x > 0 && e.y - this.pointer.y < 0) {
        ev = new Event("UpperRight");
        this.handle.dispatchEvent(ev);
      } else if (e.x - this.pointer.x < 0 && e.y - this.pointer.y > 0) {
        ev = new Event("LowerLeft");
        this.handle.dispatchEvent(ev);
      } else if (e.x - this.pointer.x > 0 && e.y - this.pointer.y > 0) {
        ev = new Event("LowerRight");
        this.handle.dispatchEvent(ev);
      }
      this.pointer.x = e.x;
      return this.pointer.y = e.y;
    };

    return GameScene;

  })(Scene);

  window.onload = function() {
    var assets;
    core = new Core(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
    assets = [];
    assets.push("title.png");
    assets.push("game.png");
    assets.push("restart.png");
    assets.push("handle.png");
    assets.push("capsule.png");
    assets.push("how.png");
    core.preload(assets);
    core.onload = function() {
      this.titleScene = new TitleScene();
      return this.pushScene(this.titleScene);
    };
    return core.start();
  };

}).call(this);
