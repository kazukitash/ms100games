// Generated by CoffeeScript 1.6.3
(function() {
  var Cage, Fruit, GameOverScene, GameScene, HowToScene, Images, TitleScene, core,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  core = {};

  Images = {
    fruit: {
      width: 100,
      height: 100
    }
  };

  Fruit = (function(_super) {
    __extends(Fruit, _super);

    Fruit.prototype.Options = [
      {
        x: -Images.fruit.width,
        y: 130,
        vx: 18,
        vy: 0,
        endX: -Images.fruit.width,
        endY: 200
      }, {
        x: 300,
        y: -Images.fruit.height,
        vx: 8,
        vy: 5,
        endX: -Images.fruit.width,
        endY: 100
      }, {
        x: HQ_GAME_WIDTH - 300 - Images.fruit.width,
        y: -Images.fruit.height,
        vx: -8,
        vy: 5,
        endX: HQ_GAME_WIDTH,
        endY: 100
      }, {
        x: HQ_GAME_WIDTH,
        y: 130,
        vx: -18,
        vy: 0,
        endX: HQ_GAME_WIDTH,
        endY: 200
      }
    ];

    Fruit.prototype.Images = [
      {
        path: "fruit1.png",
        decayed: true
      }, {
        path: "fruit2.png",
        decayed: true
      }, {
        path: "fruit3.png",
        decayed: false
      }, {
        path: "fruit4.png",
        decayed: false
      }
    ];

    function Fruit(image) {
      Fruit.__super__.constructor.call(this, Images.fruit.width, Images.fruit.height);
      image = this.Images[Math.floor(Math.random() * 4)];
      this.decayed = image.decayed;
      this.image = core.assets[image.path];
      this.options = this.Options[Math.floor(Math.random() * 4)];
      this.moveTo(this.options.x, this.options.y);
      this.vy = this.options.vy;
      this.vx = this.options.vx;
      this.level = Math.floor(core.gameScene.age / 180) / 10 + 1;
      if (this.level > 3) {
        this.level = 3;
      }
      this.vx *= this.level;
      this.vy *= this.level;
      this.startX = 0;
      this.startY = 0;
    }

    Fruit.prototype.onenterframe = function() {
      this.vy += this.level;
      return this.moveBy(this.vx, this.vy);
    };

    Fruit.prototype.ontouchstart = function() {
      var _this = this;
      return this.tl.moveTo(this.options.endX, this.options.endY, 10).then(function() {
        var ev;
        ev = new Event("Remove");
        return _this.dispatchEvent(ev);
      });
    };

    return Fruit;

  })(Sprite);

  Cage = (function(_super) {
    __extends(Cage, _super);

    function Cage() {
      Cage.__super__.constructor.call(this, 560, 170);
      this.moveTo(365, 550);
    }

    return Cage;

  })(Sprite);

  TitleScene = (function(_super) {
    __extends(TitleScene, _super);

    function TitleScene() {
      TitleScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["title.png"];
      this.addChild(this.bg);
    }

    TitleScene.prototype.ontouchstart = function() {
      core.howToScene = new HowToScene();
      return core.pushScene(core.howToScene);
    };

    return TitleScene;

  })(Scene);

  HowToScene = (function(_super) {
    __extends(HowToScene, _super);

    function HowToScene() {
      HowToScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["how.png"];
      this.addChild(this.bg);
    }

    HowToScene.prototype.ontouchstart = function() {
      core.popScene();
      core.gameScene = new GameScene();
      return core.replaceScene(core.gameScene);
    };

    return HowToScene;

  })(Scene);

  GameScene = (function(_super) {
    __extends(GameScene, _super);

    function GameScene() {
      GameScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game.png"];
      this.addChild(this.bg);
      this.cage = new Cage();
      this.addChild(this.cage);
      this.fruits = [];
      this.score = 0;
      this.scoreLabel = new Label(this.score.toString());
      this.scoreLabel.width = 300;
      this.scoreLabel.textAlign = "center";
      this.scoreLabel.moveTo(0, 20);
      this.scoreLabel.font = "64px Sans-serif";
      this.scoreLabel.color = "rgb(34, 42, 46)";
      this.addChild(this.scoreLabel);
    }

    GameScene.prototype.onenterframe = function() {
      var fruit, fruitsLength, _results;
      if (core.frame % 90 === 0) {
        this.drop();
      }
      fruitsLength = this.fruits.length;
      _results = [];
      while (fruitsLength) {
        fruit = this.fruits[--fruitsLength];
        if (this.cage.intersect(fruit)) {
          if (fruit.decayed) {
            core.gameOverScene = new GameOverScene(this.score);
            _results.push(core.replaceScene(core.gameOverScene));
          } else {
            this.score++;
            this.scoreLabel.text = this.score.toString();
            this.fruits.splice(fruitsLength, 1);
            _results.push(this.removeChild(fruit));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    GameScene.prototype.drop = function() {
      var fruit,
        _this = this;
      fruit = new Fruit();
      this.addChild(fruit);
      this.fruits.push(fruit);
      return fruit.addEventListener("Remove", function() {
        return _this.removeChild(fruit);
      });
    };

    return GameScene;

  })(Scene);

  GameOverScene = (function(_super) {
    __extends(GameOverScene, _super);

    function GameOverScene(score) {
      GameOverScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game_over.png"];
      this.addChild(this.bg);
      this.score = score;
      this.scoreLabel = new Label(this.score.toString() + "å€‹");
      this.scoreLabel.width = 600;
      this.scoreLabel.textAlign = "center";
      this.scoreLabel.moveTo((HQ_GAME_WIDTH - this.scoreLabel.width) / 2, 300);
      this.scoreLabel.font = "128px Sans-serif";
      this.scoreLabel.color = "rgb(244, 244, 244)";
      this.addChild(this.scoreLabel);
    }

    GameOverScene.prototype.ontouchstart = function() {
      core.titleScene = new TitleScene();
      return core.replaceScene(core.titleScene);
    };

    return GameOverScene;

  })(Scene);

  window.onload = function() {
    var assets;
    core = new Core(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
    assets = [];
    assets.push("title.png");
    assets.push("game.png");
    assets.push("game_over.png");
    assets.push("fruit1.png");
    assets.push("fruit2.png");
    assets.push("fruit3.png");
    assets.push("fruit4.png");
    assets.push("how.png");
    core.preload(assets);
    core.onload = function() {
      this.titleScene = new TitleScene();
      return this.pushScene(this.titleScene);
    };
    return core.start();
  };

}).call(this);
