// Generated by CoffeeScript 1.6.3
(function() {
  var Arrow, GameOverScene, GameScene, HowToScene, ScoreBoard, TitleScene, core, distance, relativeAngle,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  core = {};

  ScoreBoard = [13, 4, 18, 1, 20, 5, 12, 9, 14, 11, 8, 16, 7, 19, 3, 17, 2, 15, 10, 6];

  distance = function(self, other) {
    var dX, dY;
    dX = other.x - self.x;
    dY = other.y - self.y;
    return Math.sqrt(dX * dX + dY * dY);
  };

  relativeAngle = function(self, other) {
    var dX, dY, rad;
    dX = other.x - self.x;
    dY = other.y - self.y;
    rad = Math.atan(Math.abs(dY) / Math.abs(dX));
    if (dY < 0) {
      if (dX > 0) {
        return rad / (Math.PI / 180);
      } else {
        return 180 - rad / (Math.PI / 180);
      }
    } else {
      if (dX < 0) {
        return 180 + rad / (Math.PI / 180);
      } else {
        return 360 - rad / (Math.PI / 180);
      }
    }
  };

  Arrow = (function(_super) {
    __extends(Arrow, _super);

    function Arrow() {
      Arrow.__super__.constructor.call(this, 250, 40);
      this.image = core.assets["arrow.png"];
      this.moveTo(800, 400);
    }

    return Arrow;

  })(Sprite);

  TitleScene = (function(_super) {
    __extends(TitleScene, _super);

    function TitleScene() {
      TitleScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["title.png"];
      this.addChild(this.bg);
    }

    TitleScene.prototype.ontouchstart = function() {
      core.howToScene = new HowToScene();
      return core.pushScene(core.howToScene);
    };

    return TitleScene;

  })(Scene);

  HowToScene = (function(_super) {
    __extends(HowToScene, _super);

    function HowToScene() {
      HowToScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["how.png"];
      this.addChild(this.bg);
    }

    HowToScene.prototype.ontouchstart = function() {
      core.popScene();
      core.gameScene = new GameScene();
      return core.replaceScene(core.gameScene);
    };

    return HowToScene;

  })(Scene);

  GameScene = (function(_super) {
    __extends(GameScene, _super);

    function GameScene() {
      GameScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game.png"];
      this.addChild(this.bg);
      this.point = {
        x: 0,
        y: 0
      };
      this.arrow = new Arrow();
      this.addChild(this.arrow);
      this.target = {
        x: 400,
        y: 320
      };
      this.number = 10;
      this.numberLabel = new Label(this.number.toString());
      this.numberLabel.width = 300;
      this.numberLabel.textAlign = "center";
      this.numberLabel.moveTo(980, 20);
      this.numberLabel.font = "64px Sans-serif";
      this.numberLabel.color = "rgb(34, 42, 46)";
      this.addChild(this.numberLabel);
      this.score = 0;
      this.scoreLabel = new Label(this.score.toString() + "P");
      this.scoreLabel.width = 300;
      this.scoreLabel.textAlign = "center";
      this.scoreLabel.moveTo(980, 104);
      this.scoreLabel.font = "64px Sans-serif";
      this.scoreLabel.color = "rgb(34, 42, 46)";
      this.addChild(this.scoreLabel);
    }

    GameScene.prototype.ontouchstart = function(e) {
      var maxRadius, radian,
        _this = this;
      maxRadius = 20;
      radian = Math.random() * 360;
      if (radian >= 0 && radian < 180) {
        this.point.y = e.y + maxRadius * Math.random() * Math.sin(radian);
        if (radian < 90) {
          this.point.x = e.x + maxRadius * Math.random() * Math.cos(radian);
        } else {
          this.point.x = e.x - maxRadius * Math.random() * Math.cos(radian);
        }
      }
      if (radian >= 180 && radian < 360) {
        this.point.y = e.y - maxRadius * Math.random() * Math.sin(radian);
        if (radian < 270) {
          this.point.x = e.x - maxRadius * Math.random() * Math.cos(radian);
        } else {
          this.point.x = e.x + maxRadius * Math.random() * Math.cos(radian);
        }
      }
      this.arrow.tl.moveTo(this.point.x - this.arrow.width / 4, this.point.y - this.arrow.height / 2, 30).and().scaleTo(0.5, 0.5, 30).then(function() {
        _this.addChild(_this.arrow);
        _this.cal(_this.point);
        _this.number--;
        if (_this.number === 0) {
          core.gameOverScene = new GameOverScene(_this.score);
          core.replaceScene(core.gameOverScene);
        }
        return _this.numberLabel.text = _this.number.toString();
      });
      return this.arrow = new Arrow();
    };

    GameScene.prototype.cal = function(point) {
      var deg, radius, score;
      deg = relativeAngle(this.target, point);
      radius = distance(this.target, point);
      score = ScoreBoard[Math.floor(deg / 20)];
      if (radius < 10) {
        score = 50;
      } else if (radius < 30) {
        score = 25;
      } else if (radius > 150 && radius < 180) {
        score = score * 3;
      } else if (radius > 270 && radius < 300) {
        score = score * 2;
      } else if (radius >= 300) {
        score = 0;
      } else {
        score;
      }
      this.score += score;
      return this.scoreLabel.text = this.score.toString() + "P";
    };

    return GameScene;

  })(Scene);

  GameOverScene = (function(_super) {
    __extends(GameOverScene, _super);

    function GameOverScene(score) {
      GameOverScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game_over.png"];
      this.addChild(this.bg);
      this.score = score;
      this.scoreLabel = new Label(this.score.toString() + "P");
      this.scoreLabel.width = 600;
      this.scoreLabel.textAlign = "center";
      this.scoreLabel.moveTo(720, 200);
      this.scoreLabel.font = "128px Sans-serif";
      this.scoreLabel.color = "rgb(34, 42, 46)";
      this.addChild(this.scoreLabel);
    }

    GameOverScene.prototype.ontouchstart = function() {
      core.titleScene = new TitleScene();
      return core.replaceScene(core.titleScene);
    };

    return GameOverScene;

  })(Scene);

  window.onload = function() {
    var assets;
    core = new Core(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
    assets = [];
    assets.push("title.png");
    assets.push("game.png");
    assets.push("game_over.png");
    assets.push("arrow.png");
    assets.push("how.png");
    core.preload(assets);
    core.onload = function() {
      this.titleScene = new TitleScene();
      return this.pushScene(this.titleScene);
    };
    return core.start();
  };

}).call(this);
