// Generated by CoffeeScript 1.6.3
(function() {
  var Answer, AnswerCandidates, CountUpTimer, GameScene, Question, QuestionCandidates, TitleScene, core,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  core = {};

  CountUpTimer = (function(_super) {
    __extends(CountUpTimer, _super);

    function CountUpTimer() {
      CountUpTimer.__super__.constructor.call(this, "0.00");
      this.startAt = Infinity;
    }

    CountUpTimer.prototype.start = function() {
      return this.startAt = core.frame;
    };

    CountUpTimer.prototype.currentFrame = function() {
      return core.frame - this.startAt;
    };

    CountUpTimer.prototype.currentSec = function() {
      return this.currentFrame() / core.fps;
    };

    CountUpTimer.prototype.onenterframe = function() {
      return this.text = this.currentSec().toFixed(2);
    };

    return CountUpTimer;

  })(Label);

  Array.prototype.shuffle = function() {
    var i, j, t;
    i = this.length;
    while (i) {
      j = Math.floor(Math.random() * i);
      t = this[--i];
      this[i] = this[j];
      this[j] = t;
    }
    return this;
  };

  QuestionCandidates = [
    {
      content: "文書での相手の会社の呼び方は？",
      answer: "貴社"
    }, {
      content: "コートはどこに入るまでに脱ぐのが一般的なマナーでしょう？",
      answer: "会社の前まで"
    }, {
      content: "あなたの長所は何ですか？",
      answer: "物事に真面目に取り組むところです。以下過去に真面目にとりくんだことを述べましょう。"
    }, {
      content: "志望動機を教えて下さい。",
      answer: "御社でアルバイトをさせて頂いた際に社員の方が昼休みでも仕事を相談をする等いつでも真剣に仕事に取り組んでおり、そんな方々と一緒にお仕事をさせて頂きたいと思ったからです。"
    }, {
      content: "学校での成績や勉強はどうでしたか？",
      answer: "成績は正直あまりよくありませんが、できる限り努力致しました。成績が思う様な結果に繋がらなくても、学生の本分なのでこれからも精一杯努力していきたいです。"
    }, {
      content: "弊社の志望順位は？",
      answer: "御社が第一志望です。"
    }, {
      content: "希望以外の職種になっても大丈夫ですか？",
      answer: "はい、御社に入社することが私の一番の希望です。可能でしたら、希望の職種で仕事を行いたいですが、希望以外の職種になっても一生懸命頑張りたいと思います。"
    }, {
      content: "10年後はどうなっていたいと思いますか？",
      answer: "私の10年後は御社にとってなくてはならない存在になりたいと思っています。様々な経験を積んで、結果を残せるように頑張りたいと思います。"
    }, {
      content: "なぜ留年したと思いますか？？",
      answer: "部活動に時間を割きすぎて、勉強がおろそかになってしまいました。この自己管理能力の低さを反省して、次の年からは勉強のスケジュールを組んでから部活動のスケジュールを組むようにしました。結果、留年してからは単位を一つも落としていないのでこのまましっかりと頑張りたいと思います。"
    }, {
      content: "あなたの短所は何ですか？",
      answer: "御社が第一志望です。"
    }
  ];

  AnswerCandidates = ["貴社", "会社の前まで", "物事に真面目に取り組むところです。以下過去に真面目にとりくんだことを述べましょう。", "御社でアルバイトをさせて頂いた際に社員の方が昼休みでも仕事を相談をする等いつでも真剣に仕事に取り組んでおり、そんな方々と一緒にお仕事をさせて頂きたいと思ったからです。", "成績は正直あまりよくありませんが、できる限り努力致しました。成績が思う様な結果に繋がらなくても、学生の本分なのでこれからも精一杯努力していきたいです。", "御社が第一志望です。", "はい、御社に入社することが私の一番の希望です。可能でしたら、希望の職種で仕事を行いたいですが、希望以外の職種になっても一生懸命頑張りたいと思います。", "私の10年後は御社にとってなくてはならない存在になりたいと思っています。様々な経験を積んで、結果を残せるように頑張りたいと思います。", "部活動に時間を割きすぎて、勉強がおろそかになってしまいました。この自己管理能力の低さを反省して、次の年からは勉強のスケジュールを組んでから部活動のスケジュールを組むようにしました。結果、留年してからは単位を一つも落としていないのでこのまましっかりと頑張りたいと思います。", "御社が第一志望です。"];

  Question = (function(_super) {
    __extends(Question, _super);

    function Question() {
      Question.__super__.constructor.call(this);
      this.question = QuestionCandidates[Math.floor(Math.random() * QuestionCandidates.length)];
      this.text = this.question.content;
      this.font = "15px Serif";
      this.color = "white";
      this.textAlign = "center";
      this.width = 800;
      this.x = (HQ_GAME_WIDTH - this.width) / 2;
      this.y = (HQ_GAME_HEIGHT - this.height) / 2 - 150;
    }

    Question.prototype.answer = function() {
      var answer;
      answer = new Answer();
      answer.text = this.question.answer;
      return answer;
    };

    return Question;

  })(Label);

  Answer = (function(_super) {
    __extends(Answer, _super);

    function Answer() {
      Answer.__super__.constructor.call(this);
      this.text = AnswerCandidates[Math.floor(Math.random() * AnswerCandidates.length)];
      this.width = 400;
      this.height = 30;
      this.font = "15px Serif";
    }

    return Answer;

  })(Label);

  TitleScene = (function(_super) {
    __extends(TitleScene, _super);

    function TitleScene() {
      TitleScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["title.png"];
      this.addChild(this.bg);
    }

    TitleScene.prototype.ontouchstart = function() {
      core.gameScene = new GameScene();
      return core.replaceScene(core.gameScene);
    };

    return TitleScene;

  })(Scene);

  GameScene = (function(_super) {
    __extends(GameScene, _super);

    function GameScene() {
      GameScene.__super__.constructor.call(this);
      this.length = 0;
      this.score = 0;
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game.png"];
      this.addChild(this.bg);
      this.timer = new CountUpTimer();
      this.timer.font = "40px Serif";
      this.timer.moveTo(60, 60);
      this.timer.start();
      this.addChild(this.timer);
      this.next();
    }

    GameScene.prototype.next = function() {
      var _this = this;
      this.startAt = core.frame;
      this.question = new Question();
      this.addChild(this.question);
      this.answers = [this.question.answer()];
      this.answers.push(new Answer());
      this.answers.push(new Answer());
      this.answers.push(new Answer());
      this.answers = this.answers.shuffle();
      this.answers[0].moveTo(100, 460);
      this.answers[1].moveTo(700, 460);
      this.answers[2].moveTo(100, 620);
      this.answers[3].moveTo(700, 620);
      return this.answers.forEach(function(answer) {
        _this.addChild(answer);
        return answer.addEventListener("touchstart", function() {});
      });
    };

    GameScene.prototype.removePrevious = function() {
      var _this = this;
      this.removeChild(this.question);
      return this.answers.forEach(function(answer) {
        return _this.removeChild(answer);
      });
    };

    GameScene.prototype.ontouchstart = function(e) {
      var answer, x, y;
      this.length++;
      x = e.x;
      y = e.y;
      if (x < HQ_GAME_WIDTH / 2) {
        if (560 < y) {
          answer = this.answers[2];
        } else if (440 < y) {
          answer = this.answers[0];
        }
      } else {
        if (560 < y) {
          answer = this.answers[3];
        } else if (440 < y) {
          answer = this.answers[1];
        }
      }
      console.log(this.question.answer().text);
      console.log(answer.text);
      if (this.question.answer().text === answer.text) {
        this.score++;
      }
      this.removePrevious();
      this.next();
      if (this.length === 10) {
        core.titleScene = new TitleScene();
        return core.replaceScene(core.titleScene);
      }
    };

    return GameScene;

  })(Scene);

  window.onload = function() {
    var assets;
    core = new Core(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
    assets = [];
    assets.push("title.png");
    assets.push("game.png");
    core.preload(assets);
    core.onload = function() {
      this.titleScene = new TitleScene();
      return this.pushScene(this.titleScene);
    };
    return core.start();
  };

}).call(this);
