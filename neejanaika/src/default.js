// Generated by CoffeeScript 1.6.3
(function() {
  var Coaster, CountUpTimer, GameOverScene, GameScene, HowToScene, Player, TitleScene, Warning, coasterOptions, coordinates, core,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  core = {};

  coasterOptions = [
    {
      image: "coaster2.png",
      iniSpd: 15,
      iniPosX: 182
    }, {
      image: "coaster1.png",
      iniSpd: 25,
      iniPosX: 530
    }, {
      image: "coaster3.png",
      iniSpd: 35,
      iniPosX: 878
    }
  ];

  CountUpTimer = (function(_super) {
    __extends(CountUpTimer, _super);

    function CountUpTimer() {
      CountUpTimer.__super__.constructor.call(this);
      this.startAt = Infinity;
      this.stopAt = Infinity;
    }

    CountUpTimer.prototype.start = function() {
      return this.startAt = core.frame;
    };

    CountUpTimer.prototype.stop = function() {
      return this.stopAt = core.frame;
    };

    CountUpTimer.prototype.isStarted = function() {
      return this.startAt < core.frame;
    };

    CountUpTimer.prototype.isStopped = function() {
      return this.stopAt < core.frame;
    };

    CountUpTimer.prototype.remainingFrame = function() {
      return core.frame - this.startAt;
    };

    CountUpTimer.prototype.remainingSec = function() {
      return this.remainingFrame() / core.fps;
    };

    CountUpTimer.prototype.penalty = function(penalty) {
      return this.startAt -= penalty * core.fps;
    };

    CountUpTimer.prototype.onenterframe = function() {
      if (!this.isStopped()) {
        return this.text = this.remainingSec().toFixed(2);
      }
    };

    return CountUpTimer;

  })(Label);

  coordinates = function() {
    this.cx = function() {
      return this.x + this.width / 2;
    };
    return this.cy = function() {
      return this.y + this.height / 2;
    };
  };

  Warning = (function(_super) {
    __extends(Warning, _super);

    function Warning() {
      Warning.__super__.constructor.call(this, 108, 94);
      this.image = core.assets["warning.png"];
      coordinates();
    }

    return Warning;

  })(Sprite);

  Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      Player.__super__.constructor.call(this, 107, 128);
      this.image = core.assets["chara.png"];
      this.moveTo((HQ_GAME_WIDTH - this.width) / 2, 420);
      this.line = 1;
      this.isOnTheCoaster = true;
      this.speed = 0;
      this.jumpAt = Infinity;
      coordinates();
    }

    Player.prototype.onenterframe = function() {
      this.moveBy(0, this.speed);
      if (this.y > HQ_GAME_HEIGHT || this.y < 0) {
        core.gameOverScene = new GameOverScene(this.scene.score);
        return core.replaceScene(core.gameOverScene);
      }
    };

    return Player;

  })(Sprite);

  Coaster = (function(_super) {
    __extends(Coaster, _super);

    function Coaster(options) {
      Coaster.__super__.constructor.call(this, 217, 860);
      this.image = core.assets[options.image];
      this.iniPosY = -860;
      this.iniPosX = options.iniPosX;
      this.moveTo(this.iniPosX, this.iniPosY);
      this.speed = options.iniSpd;
      this.vy = 0;
      this.startAt = Infinity;
      this.line = 0;
      this.time = 119;
      coordinates();
    }

    Coaster.prototype.onenterframe = function() {
      if (core.frame - this.startAt === this.time) {
        if (this.iniPosY < 0) {
          this.tl.moveTo(this.iniPosX, 720, 790 / this.speed);
          if (this.scene.player.isOnTheCoaster && this.scene.player.line === this.line) {
            this.scene.player.speed = this.speed;
          }
        }
        if (this.iniPosY > 0) {
          this.tl.moveTo(this.iniPosX, -860, 790 / this.speed);
          if (this.scene.player.isOnTheCoaster && this.scene.player.line === this.line) {
            this.scene.player.speed = -this.speed;
          }
        }
      }
      if (this.age % 120 === 0) {
        this.speed += 3;
        if (this.time > 95) {
          return this.time--;
        }
      }
    };

    return Coaster;

  })(Sprite);

  TitleScene = (function(_super) {
    __extends(TitleScene, _super);

    function TitleScene() {
      TitleScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["title.png"];
      this.addChild(this.bg);
    }

    TitleScene.prototype.ontouchstart = function() {
      core.howToScene = new HowToScene();
      return core.pushScene(core.howToScene);
    };

    return TitleScene;

  })(Scene);

  HowToScene = (function(_super) {
    __extends(HowToScene, _super);

    function HowToScene() {
      HowToScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["how.png"];
      this.addChild(this.bg);
    }

    HowToScene.prototype.ontouchstart = function() {
      core.popScene();
      core.gameScene = new GameScene();
      return core.replaceScene(core.gameScene);
    };

    return HowToScene;

  })(Scene);

  GameScene = (function(_super) {
    __extends(GameScene, _super);

    function GameScene() {
      var coaster, i, _i;
      GameScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, 2 * HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game.png"];
      this.addChild(this.bg);
      this.moveTo(0, -2 * HQ_GAME_HEIGHT);
      this.bg.addEventListener("enterframe", function() {
        this.y += 14;
        if (this.y >= 0) {
          return this.y = -HQ_GAME_HEIGHT;
        }
      });
      this.currentLine = 1;
      this.coasters = [];
      for (i = _i = 0; _i <= 2; i = _i += 1) {
        coaster = new Coaster(coasterOptions[i]);
        coaster.line = i;
        this.addChild(coaster);
        this.coasters.push(coaster);
        if (i === 1) {
          coaster.y = 0;
          coaster.startAt = core.frame;
        }
      }
      this.player = new Player();
      this.addChild(this.player);
      this.score = 0;
      this.scoreLabel = new Label(this.score.toString());
      this.scoreLabel.width = 300;
      this.scoreLabel.textAlign = "center";
      this.scoreLabel.moveTo(0, 20);
      this.scoreLabel.font = "64px Sans-serif";
      this.scoreLabel.color = "rgb(34, 42, 46)";
      this.addChild(this.scoreLabel);
    }

    GameScene.prototype.onenterframe = function() {
      var coaster, i, nextLine, startPos, _i,
        _this = this;
      this.player.isOnTheCoaster = false;
      for (i = _i = 0; _i <= 2; i = _i += 1) {
        coaster = this.coasters[i];
        if (coaster.intersect(this.player)) {
          this.player.isOnTheCoaster = true;
          this.score++;
          this.scoreLabel.text = this.score.toString();
        }
      }
      if (core.frame - this.player.jumpAt === 30) {
        if (!this.player.isOnTheCoaster) {
          this.player.tl.rotateTo(720, 30).and().scaleTo(0.1, 0.1, 30);
          this.player.tl.then(function() {
            core.gameOverScene = new GameOverScene(_this.score);
            return core.replaceScene(core.gameOverScene);
          });
        }
      }
      if (this.age % 90 === 0) {
        switch (this.currentLine) {
          case 0:
            this.currentLine = 1;
            break;
          case 1:
            nextLine = Math.random() * 2 - 1;
            if (nextLine < 0) {
              this.currentLine = 0;
            } else {
              this.currentLine = 2;
            }
            break;
          case 2:
            this.currentLine = 1;
        }
        coaster = this.coasters[this.currentLine];
        coaster.startAt = core.frame;
        startPos = Math.random() * 2 - 1;
        if (startPos < 0) {
          coaster.iniPosY = -860;
        } else {
          coaster.iniPosY = 720;
        }
        coaster.moveTo(coaster.iniPosX, coaster.iniPosY);
        return coaster.tl.moveTo(coaster.iniPosX, -70, 790 / coaster.speed);
      }
    };

    GameScene.prototype.ontouchstart = function(e) {
      this.player.speed = 0;
      this.player.jumpAt = core.frame;
      switch (this.player.line) {
        case 0:
          if (e.x > 460) {
            this.player.line = 1;
            this.player.tl.scaleTo(1.3, 1.3, 15).and().moveBy(175, 0, 15);
            return this.player.tl.scaleTo(1, 1, 15).and().moveBy(175, 0, 15);
          }
          break;
        case 1:
          if (e.x > 815) {
            this.player.line = 2;
            this.player.tl.scaleTo(1.3, 1.3, 15).and().moveBy(175, 0, 15);
            return this.player.tl.scaleTo(1, 1, 15).and().moveBy(175, 0, 15);
          } else if (e.x < 460) {
            this.player.line = 0;
            this.player.tl.scaleTo(1.3, 1.3, 15).and().moveBy(-175, 0, 15);
            return this.player.tl.scaleTo(1, 1, 15).and().moveBy(-175, 0, 15);
          }
          break;
        case 2:
          if (e.x < 815) {
            this.player.line = 1;
            this.player.tl.scaleTo(1.3, 1.3, 15).and().moveBy(-175, 0, 15);
            return this.player.tl.scaleTo(1, 1, 15).and().moveBy(-175, 0, 15);
          }
      }
    };

    return GameScene;

  })(Scene);

  GameOverScene = (function(_super) {
    __extends(GameOverScene, _super);

    function GameOverScene(score) {
      GameOverScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game_over.png"];
      this.addChild(this.bg);
      this.score = score;
      this.scoreLabel = new Label(this.score.toString() + "ç‚¹");
      this.scoreLabel.width = 300;
      this.scoreLabel.textAlign = "center";
      this.scoreLabel.moveTo((HQ_GAME_WIDTH - this.scoreLabel.width) / 2, 300);
      this.scoreLabel.font = "64px Sans-serif";
      this.scoreLabel.color = "rgb(34, 42, 46)";
      this.addChild(this.scoreLabel);
    }

    GameOverScene.prototype.ontouchstart = function() {
      core.titleScene = new TitleScene();
      return core.replaceScene(core.titleScene);
    };

    return GameOverScene;

  })(Scene);

  window.onload = function() {
    var assets;
    core = new Core(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
    assets = [];
    assets.push("title.png");
    assets.push("game.png");
    assets.push("game_over.png");
    assets.push("coaster1.png");
    assets.push("coaster2.png");
    assets.push("coaster3.png");
    assets.push("chara.png");
    assets.push("warning.png");
    assets.push("how.png");
    core.preload(assets);
    core.onload = function() {
      this.titleScene = new TitleScene();
      return this.pushScene(this.titleScene);
    };
    return core.start();
  };

}).call(this);
