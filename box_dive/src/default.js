// Generated by CoffeeScript 1.6.3
(function() {
  var CountDownTimer, GameOverScene, GameScene, Gari, ScoreBoard, ScorePosition, TitleScene, core, distance, relativeAngle,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  core = {};

  ScoreBoard = [13, 4, 18, 1, 20, 5, 12, 9, 14, 11, 8, 16, 7, 19, 3, 17, 2, 15, 10, 6];

  ScorePosition = [
    {
      x: 197,
      y: 9
    }, {
      x: 496,
      y: 9
    }, {
      x: 794,
      y: 9
    }, {
      x: 197,
      y: 114
    }, {
      x: 496,
      y: 114
    }, {
      x: 794,
      y: 114
    }
  ];

  Array.prototype.shuffle = function() {
    var i, j, t;
    i = this.length;
    while (i) {
      j = Math.floor(Math.random() * i);
      t = this[--i];
      this[i] = this[j];
      this[j] = t;
    }
    return this;
  };

  CountDownTimer = (function(_super) {
    __extends(CountDownTimer, _super);

    function CountDownTimer(sec) {
      CountDownTimer.__super__.constructor.call(this);
      this.frame = sec * core.fps;
      this.startAt = Infinity;
    }

    CountDownTimer.prototype.start = function() {
      return this.startAt = core.frame;
    };

    CountDownTimer.prototype.isStarted = function() {
      return this.startAt < core.frame;
    };

    CountDownTimer.prototype.remainingFrame = function() {
      return this.frame - core.frame + this.startAt;
    };

    CountDownTimer.prototype.remainingSec = function() {
      return this.remainingFrame() / core.fps;
    };

    CountDownTimer.prototype.onenterframe = function() {
      var e;
      this.text = this.remainingSec().toFixed(2);
      if (this.remainingFrame() === 0) {
        e = new Event("over");
        return this.dispatchEvent(e);
      }
    };

    return CountDownTimer;

  })(Label);

  distance = function(self, other) {
    var dX, dY;
    dX = other.x - self.x;
    dY = other.y - self.y;
    return Math.sqrt(dX * dX + dY * dY);
  };

  relativeAngle = function(self, other) {
    var dX, dY, rad;
    dX = other.x - self.x;
    dY = other.y - self.y;
    rad = Math.atan(Math.abs(dY) / Math.abs(dX));
    if (dY < 0) {
      if (dX > 0) {
        return rad / (Math.PI / 180);
      } else {
        return 180 - rad / (Math.PI / 180);
      }
    } else {
      if (dX < 0) {
        return 180 + rad / (Math.PI / 180);
      } else {
        return 360 - rad / (Math.PI / 180);
      }
    }
  };

  Gari = (function(_super) {
    __extends(Gari, _super);

    function Gari() {
      Gari.__super__.constructor.call(this, 103, 144);
      this.image = core.assets["gari.png"];
      this.moveTo((HQ_GAME_WIDTH + this.width) / 2, 500);
    }

    return Gari;

  })(Sprite);

  TitleScene = (function(_super) {
    __extends(TitleScene, _super);

    function TitleScene() {
      TitleScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["title.png"];
      this.addChild(this.bg);
    }

    TitleScene.prototype.ontouchstart = function() {
      core.gameScene = new GameScene();
      return core.replaceScene(core.gameScene);
    };

    return TitleScene;

  })(Scene);

  GameScene = (function(_super) {
    __extends(GameScene, _super);

    function GameScene() {
      var i, label, pos, _i,
        _this = this;
      GameScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game.png"];
      this.addChild(this.bg);
      this.point = {
        x: 0,
        y: 0
      };
      this.gari = new Gari();
      this.addChild(this.gari);
      this.target = {
        x: 400,
        y: 320
      };
      this.score = 0;
      this.scoreLabel = new Label(this.score.toString());
      this.scoreLabel.width = 300;
      this.scoreLabel.textAlign = "center";
      this.scoreLabel.moveTo(1020, 60);
      this.scoreLabel.font = "44px Sans-serif";
      this.scoreLabel.color = "#d8f4ff";
      this.addChild(this.scoreLabel);
      this.timer = new CountDownTimer(15);
      this.timer.width = 150;
      this.timer.textAlign = "center";
      this.timer.start();
      this.timer.font = "64px Serif";
      this.timer.color = "#6e8ca2";
      this.timer.moveTo(10, 110);
      this.addChild(this.timer);
      this.timer.addEventListener("over", function() {
        core.GameOverScene = new GameOverScene(_this.score);
        return core.replaceScene(core.GameOverScene);
      });
      this.scoreList = [];
      for (i = _i = 0; _i <= 5; i = ++_i) {
        pos = ScorePosition[i];
        label = new Label(ScoreBoard[i]);
        label.width = 289;
        label.textAlign = "center";
        label.moveTo(pos.x, pos.y);
        label.font = "90px Sans-serif";
        label.color = "#6e8ca2";
        this.addChild(label);
        this.scoreList.push(label);
      }
    }

    GameScene.prototype.ontouchstart = function(e) {
      var maxRadius, radian,
        _this = this;
      maxRadius = 20;
      radian = Math.random() * 360;
      if (radian >= 0 && radian < 180) {
        this.point.y = e.y + maxRadius * Math.random() * Math.sin(radian);
        if (radian < 90) {
          this.point.x = e.x + maxRadius * Math.random() * Math.cos(radian);
        } else {
          this.point.x = e.x - maxRadius * Math.random() * Math.cos(radian);
        }
      }
      if (radian >= 180 && radian < 360) {
        this.point.y = e.y - maxRadius * Math.random() * Math.sin(radian);
        if (radian < 270) {
          this.point.x = e.x - maxRadius * Math.random() * Math.cos(radian);
        } else {
          this.point.x = e.x + maxRadius * Math.random() * Math.cos(radian);
        }
      }
      this.gari.tl.moveTo(this.point.x - this.gari.width / 2, this.point.y - this.gari.height / 2, 30).and().scaleTo(0.5, 0.5, 30).then(function() {
        _this.addChild(_this.gari);
        return _this.cal(_this.point);
      });
      return this.gari = new Gari();
    };

    GameScene.prototype.cal = function(point) {
      var i, pos, score, x, y, _i;
      x = this.point.x + this.gari.width / 2;
      y = this.point.y + this.gari.height / 2;
      score = 0;
      for (i = _i = 0; _i <= 5; i = ++_i) {
        pos = ScorePosition[i];
        if (x > pos.x && x < pos.x + 289 && y > pos.y && y < pos.y + 197) {
          score = ScoreBoard[i];
        }
      }
      this.score += score;
      return this.scoreLabel.text = this.score.toString();
    };

    GameScene.prototype.onenterframe = function() {
      var i, _i, _results;
      if (this.age % 10 === 0) {
        ScoreBoard.shuffle();
        _results = [];
        for (i = _i = 0; _i <= 5; i = ++_i) {
          _results.push(this.scoreList[i].text = ScoreBoard[i]);
        }
        return _results;
      }
    };

    return GameScene;

  })(Scene);

  GameOverScene = (function(_super) {
    __extends(GameOverScene, _super);

    function GameOverScene(score) {
      GameOverScene.__super__.constructor.call(this);
      this.bg = new Sprite(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
      this.bg.image = core.assets["game_over.png"];
      this.addChild(this.bg);
      this.score = score;
      this.scoreLabel = new Label(this.score.toString());
      this.scoreLabel.width = 600;
      this.scoreLabel.textAlign = "center";
      this.scoreLabel.moveTo(250, 330);
      this.scoreLabel.font = "96px Sans-serif";
      this.scoreLabel.color = "#ff5739";
      this.addChild(this.scoreLabel);
    }

    GameOverScene.prototype.ontouchstart = function() {
      core.titleScene = new TitleScene();
      return core.replaceScene(core.titleScene);
    };

    return GameOverScene;

  })(Scene);

  window.onload = function() {
    var assets;
    core = new Core(HQ_GAME_WIDTH, HQ_GAME_HEIGHT);
    assets = [];
    assets.push("title.png");
    assets.push("game.png");
    assets.push("game_over.png");
    assets.push("gari.png");
    core.preload(assets);
    core.onload = function() {
      this.titleScene = new TitleScene();
      return this.pushScene(this.titleScene);
    };
    return core.start();
  };

}).call(this);
